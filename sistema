#include <iostream>
#include <locale.h> //biblioteca para caracteres em portugues
#include <stdlib.h> //usar o clear
#include <fstream> //uso de arquivos
using namespace std;

const int MAX_PRODUTOS = 100; //limite de produtos cadastrados
const int MAX_CARRINHO = 50; //limite de itens no carrinho

struct Mercado //a struct kkkkk
{
    string nomeDoProduto; //definir nome dos produtos
    float quantidade; //quantos tem do produto
    float valorDeVenda; //valor de vende de cada um
};

void EscreverProdutosArquivo (Mercado produtos [], int tamanho, const string& estoque) //função para gravar as informações no arquivo
{
    ofstream escritor(estoque);
    if (escritor.is_open())
    {
        for(int i=0; i<tamanho; i++)
        {
            escritor<<produtos[i].nomeDoProduto<<"\n"; //escrever o nome do produto no arquivo
            escritor<<produtos[i].quantidade<<"\n"; //escrever a quantidade do produto no arquivo
            escritor<<produtos [i].valorDeVenda<<"\n"; //escrever o valor do produto no arquivo
        }
        escritor.close();
    }
    else
    {
        cout<<"O arquivo não foi aberto corretamente! Entre em contato com o suporte \n";
    }

}

void LerProdutoArquivo(Mercado produtos [], int& tamanho, const string& estoque) //função para ler o arquivo
{
    ifstream leitor (estoque);
    if (leitor.is_open())
    {
        tamanho = 0; //inicia o tamanho para 0
        while(getline(leitor,produtos[tamanho].nomeDoProduto)) //le o nome do produto
        {
            leitor>>produtos[tamanho].quantidade; //le a quantidade
            leitor>>produtos[tamanho].valorDeVenda; // le o valor
            leitor.ignore(); //ignora a proxima linha
            tamanho++; //aumenta o tamanho
        }
    leitor.close();
    }
    else
    {
        cout<<"Erro ao ler o arquivo, digite qualquer numero inteiro para entrar em contato com o suporte \n";
    }
}
//função para atualizar ou adicionar itens
void AtualizarOuAdd (Mercado produtos[], int& tamanho, const string& estoque)
{
    string pesquisaUsuario; //string para add ou atualizar
    cout<<"Digite o nome do produto que deseja Adicionar ou Atualizar (ou digite 'cancelar' para sair) (cuidado com os espaços) \n";
    cin.ignore();
    getline(cin, pesquisaUsuario); //para pegar a frase inteira ex: Takis Hiper Mega Ultra Picante

    if (pesquisaUsuario=="cancelar") //verificar se o usuario quer sair
    {
        cout<<"Operação cancelada! \n";
        return; //retorna para o menu
    }

    bool existe = false; //verificar se vai ser uma atualização de produto ou adição
    for (int j=0; j<tamanho;j++)//para verificar nos produtos ja em "estoque"
    {
        if(pesquisaUsuario==produtos[j].nomeDoProduto) //verificar o valor digitado pelo usuario com os ja salvos
        {
            existe = true; //altera pois o valor foi encontrado
            cout<<"Esse produto ja existe em nossa base! Deseja atualiza-lo? (S/N) \n";
            string resposta; //para verificar a resposta
            cin>>resposta;

            if (resposta != "S" && resposta != "s")
            {
                cout<<"Operação cancelada \n";
                return;
            }
            cin.ignore(); //limpar o valor pelo enter

            cout<<"Digite o novo nome do produto, caso queira manter o mesmo digite 'X'(cuidado com os espaços) \n";
            string attNome;
            getline(cin,attNome);
            if(attNome != "x" && attNome != "X") //verificação para manter o mesmo nome
            {
                produtos[j].nomeDoProduto=attNome;
            }
            cout<<"Insira a nova quantidade, somando com a anterior (atual: " << produtos[j].quantidade <<") \n";
                cin>>produtos[j].quantidade;

                if (produtos[j].quantidade==0)
                {
                    cout<<"Atualização cancelada \n";
                    return;
                }
                if (produtos[j].quantidade<0)
                {
                    while(produtos[j].quantidade<0)
                    {
                        cout<<"O valor digitado foi invalido, digite novamente \n";
                        cin>>produtos[j].quantidade;
                    }
                }
                cout<<"Insira o novo valor para o produto (atual: R$ " << produtos[j].valorDeVenda << ")\n";
                cin>>produtos[j].valorDeVenda;
                if (produtos[j].valorDeVenda==0)
                    {
                        cout<< "brinde cadastrado \n";
                    }
                if (produtos[j].valorDeVenda<0)
                {
                    while(produtos[j].valorDeVenda<0)
                    {
                        cout<<"O valor digitado foi invalido, digite novamente \n";
                        cin>>produtos[j].valorDeVenda;
                    }
                }
                EscreverProdutosArquivo(produtos, tamanho, estoque);
                cout << "Dados atualizados com sucesso.\n";
                return;
        }
    }

    if (!existe) //verificação para adicionar
    {
        if(tamanho < MAX_PRODUTOS) //verificação para ver se o tamanho limite não foi atingido
        {
            cout<<"Produto não encontrado! Deseja cadastra-lo? (s/n) \n";
            string addProduto;
            cin>>addProduto;

            if(addProduto == "S" || addProduto == "s") //verificação para prosseguir com o cadastro
            {
                cin.ignore();

                produtos[tamanho].nomeDoProduto = pesquisaUsuario;
                cout<<"A seguir digite a quantidade: \n";
                cin>>produtos[tamanho].quantidade;

                if (produtos[tamanho].quantidade<0) //verificação para que a quantidade não fique negativa
                {
                    while(produtos[tamanho].quantidade<0) //loop até que um valor valido seja digitado
                    {
                        cout<<"A quantidade digitada foi invalido, digite novamente \n";
                        cin>>produtos[tamanho].quantidade;
                    }
                }

                cout<< "Por gentileza escolha o preço do produto: \n";
                cin>>produtos[tamanho].valorDeVenda;
                if (produtos[tamanho].valorDeVenda==0)
                    {
                        cout<< "brinde cadastrado \n";
                    }
                 if (produtos[tamanho].valorDeVenda<0) //verificação para que o valor de venda não fique negativo
                {
                    while(produtos[tamanho].valorDeVenda<0) //loop ate que o valor seja valido
                    {
                        cout<<"O valor digitado foi invalido, digite novamente \n";
                        cin>>produtos[tamanho].valorDeVenda;
                    }
                }
                tamanho++;
                EscreverProdutosArquivo(produtos, tamanho, estoque);
                cout << "Produto cadastrado com sucesso.\n";
            }
            else
            {
                 cout << "Cadastro cancelado.\n";
                 return;
            }
        }
        else
        {
            cout << "Limite de produtos alcançado.\n";
            return;
        }
    }

}

//Mostrar os produtos que tem dentro do carrinho
void ItensCarrinho (string nomeProdutosCarrinho[], float produtosQuantidade[], int qtddItensCarrinho)
{
    cout<<"Itens no carrinho: \n";
    for(int i=0;i<qtddItensCarrinho;i++)
    {
        cout<<nomeProdutosCarrinho[i]<<" - Quantidade: "<< produtosQuantidade[i]<<"\n";
    }
}

//Remover os produtos do carrinho
void RemoverProdutosCarrinho (string nomeProdutosCarrinho[], float produtosQuantidade[], int& qtddItensCarrinho)
{
    string removerIten;
    cout<<"Digite o nome do produto que você deseja retirar (cuidado com os espaços no fim da frase) \n";
    cin.ignore();
    getline(cin,removerIten);

    bool existe = false;

    for(int i=0;i<qtddItensCarrinho;i++)
    {
        if(nomeProdutosCarrinho[i] == removerIten)
        {
            existe = true;
            for(int j=i;j<qtddItensCarrinho - 1;j++)
            {
                nomeProdutosCarrinho[j] = nomeProdutosCarrinho[j+1];
                produtosQuantidade [j] = produtosQuantidade[j+1];
            }
            qtddItensCarrinho--;
            cout<< "O produto: "<< removerIten<< " foi removido do carrinho \n";
            break;
        }
    }
    if (!existe)
    {
        cout<<"Este produto não esta no carrinho \n";
    }
}

//função para somar as vendas
void CarrinhoDoMercadinho(Mercado produtos[], int& tamanho, const string& estoque)
{
    string produtosCarrinho[MAX_CARRINHO]; //Armazena o nome dos itens
    float quantidadeCarrinho [MAX_CARRINHO];  //Amazena a quantidade POR produto
    int itensCarrinho = 0;

    string pesquisaUsuario;
    float quantidade;
    float valorTotal = 0.0; //valor total incial

    cout<<"Digite os produtos e quantidades para adicionar ao carrinho: \n";
    cout<<"Digite 'pagamento' para ir para a parte de pagamentos, 'cancelar' para cancelar a compra \n";

    while (itensCarrinho<MAX_CARRINHO)
    {
        cout<<"Digite o nome do produto \n";
        getline(cin, pesquisaUsuario);


        if(pesquisaUsuario=="pagamento")
        {
            break;
        }
        if(pesquisaUsuario=="cancelar")
        {
            cout<<"Sua compra foi cancelada \n";
            return;
        }
        cout<<"Digite a quantidade desejada: \n";
        cin>>quantidade;

        produtosCarrinho[itensCarrinho]=pesquisaUsuario;
        quantidadeCarrinho[itensCarrinho]=quantidade;
        itensCarrinho++;

        cout<<"Deseja remover algum item da compra? (sim/nao) \n";
        string opcaoRemover;
        getline(cin,opcaoRemover);
        if(opcaoRemover=="sim")
        {
            RemoverProdutosCarrinho(produtosCarrinho, quantidadeCarrinho, itensCarrinho); //função para remover os itens
        }
    }
    ItensCarrinho(produtosCarrinho, quantidadeCarrinho, itensCarrinho); //função para mostrar os itens no carrinho

    for(int i=0; i<itensCarrinho; i++)
    {
        bool existe = false;
        for(int j =0; j <tamanho; j++)
        {
            if(produtos[j].nomeDoProduto==produtosCarrinho[i])
            {
                existe = true;
                if(quantidadeCarrinho[i]>produtos[j].quantidade)
                {
                    cout<<" Quantidade insuficiente para: "<<produtos[j].quantidade<<"! \n";
                }
                else
                {
                    produtos[j].quantidade-=quantidadeCarrinho[i];
                    valorTotal += quantidadeCarrinho[i] * produtos[j].valorDeVenda;
                    cout<<"O produto:" << produtos[j].nomeDoProduto<<" foi adicionado com sucesso \n";
                    cout<<"Quantidade restante no estoque: "<<produtos[j].quantidade<<"\n";
                }
                break;
            }
        }
        if (!existe)
        {
            cout<<"O produto" <<produtosCarrinho[i]<< "não existe no estoque \n";
        }
    }

    //valor total
    cout<<"O valor total do carrinho é: R$ "<<valorTotal<<"\n";

    //opções de pagamento
    int metodoPagamento,parcelamento;
    float valorFinal= 0.0, juros = 0.0;


    cout<< "Selecione seu método de pagamento: \n";
    cout<< " 1 - a vista (5% de desconto em cima do valor da compra) \n";
    cout<< " 2 - crédito (até 3x sem juros) \n";
    cout<<" 3 - crédito (até 12x com 10% de juros) \n";

    cin>> metodoPagamento;
    switch (metodoPagamento) //menu para opção de pagamento
    {
        case 1: //opção para pagamento a vista
            valorFinal = 0.05 * valorTotal;
            valorFinal = valorTotal - valorFinal;
            cout<<"Pagamento realizado! Você pagou: R$"<<valorFinal;
        break;
        case 2://opção para parcelamento em até 3x
            cout<< "escolha a quantas vezes você irá parcelar (lembrando que essa opção permite somente até 3x) \n";
            cin>>parcelamento;
            if (parcelamento>3 || parcelamento<1) //verificação para ver se o numero digitado é valido
            {
                while (parcelamento>3 || parcelamento<1) //loop para que o usuario digite o valor correto
                {
                    cout<<"Valor invalido, escolha um dos valores disponiveis para essa opção \n";
                    cin>>parcelamento;
                }
            }
            valorFinal = valorTotal/parcelamento;
            cout<<"Pagamento realizado! Você pagou "<<parcelamento<< "x de R$"<<valorFinal<<"\n";
        break;
        case 3://opção de parcelamento de 4 a 12x
            cout<< "escolha a quantas vezes você irá parcelar (lembrando que essa opção permite somente até 12x) \n";
            cin>>parcelamento;
            if (parcelamento>12 || parcelamento<4) //verificação para verificar se o numero digitado é valido
            {
                while (parcelamento>12 || parcelamento<4) //loop para que o usuario digite o valor correto
                    {
                        cout<<"Valor invalido, escolha um dos valores disponiveis para essa opção \n";
                        cin>>parcelamento;
                    }
            }
            juros = valorTotal * 0.10 * parcelamento; //calculando juros simples ao mes, entendi na prremissa que era 10% ao mes;
            valorFinal = juros + valorTotal;
            cout<<"Pagamento realizado! Você pagou "<<parcelamento<< "x de R$"<<valorFinal<<"\n";

        break;
        default:
            cout<<"Opção invalida! Tente novamente. \n";
        break;

    }
  //salvar as alterações no arquivo
    EscreverProdutosArquivo(produtos,tamanho,estoque);
    cout<<"Dados atualizados com sucesso \n";

}

void menu (Mercado produtos[], int& tamanho, const string& estoque)
{
    int selecaoDeModulo;
    do
    {
        cout<<"==============================================\n";
        cout<< "   BEM VINDO AO SISTEMA DO MERCADINHO OP \n\n";
        cout << "   NOSSO LEMA É:  GAME OVER? SÓ NO PREÇO   \n";
        cout<<"==============================================\n";
        cout << " \n";
        cout<< "Digite 1 para ADIÇÃO DE ESTOQUE; \n";
        cout << "Digite 2 para VENDAS; \n";
        cout<< "Digite 3 para PRODUTOS CADASTRADOS; \n";
        cout << "Digite 4 para Dúvidas e mais Informações sobre o sistema; \n";
        cout << "Digite 5 para Sair; \n";
        cin>>selecaoDeModulo;
        system("cls");

        switch (selecaoDeModulo)
        {
            case 1:
                AtualizarOuAdd(produtos,tamanho,estoque);
            break;
            case 2:
                CarrinhoDoMercadinho(produtos,tamanho,estoque);
            break;
            case 3:
                LerProdutoArquivo(produtos,tamanho,estoque);  //ler arquivo
                for (int i = 0; i<tamanho;i++) //verificar um por um
                {
                  cout<<produtos[i].nomeDoProduto <<" - Quantidade: " << produtos[i].quantidade << " - Preço: R$" << produtos[i].valorDeVenda <<"\n\n";
                }
            break;
            case 4:
                cout<< "Sistema desenvolvido por Vitória Araújo Silveira e Daniel Machado Nascimento \n";
                cout << "Em caso de dúvidas o suporte não esta disponviel, boa sorte :) \n";
                cout << "Aqui somos inimigos do Helpdesk *emogi de joia* \n";
                cout <<" \n";
            break;
            case 5:
                cout<< "Até a próxima! \n";

            break;
            default:
                cout<< "Opção invalida tente novamente \n";
        }
    }
    while (selecaoDeModulo !=5);
}
int main()
{   Mercado produtos[MAX_PRODUTOS];
    int tamanho = 0;
    string estoque = "estoque.txt";
    setlocale(LC_ALL, "Portuguese");  //Definindo os caracteres como portugues (para pegar os acentos)


    LerProdutoArquivo(produtos,tamanho,estoque);  //ler arquivo


    menu(produtos,tamanho,estoque); //puxar o menu
    return 0;
}

